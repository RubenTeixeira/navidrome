name: "Pipeline: Test, Lint, Build"
on:
  push:
    branches:
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ startsWith(github.ref, 'refs/tags/v') && 'tag' || 'branch' }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CROSS_TAGLIB_VERSION: "2.0.2-1"
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') && 'true' || 'false' }}

jobs:
  git-version:
    name: Get version info
    runs-on: ubuntu-latest
    outputs:
      git_tag: ${{ steps.git-version.outputs.GIT_TAG }}
      git_sha: ${{ steps.git-version.outputs.GIT_SHA }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Show git version info
        run: |
          echo "git describe (dirty): $(git describe --dirty --always --tags)"
          echo "git describe --tags: $(git describe --tags `git rev-list --tags --max-count=1`)"
          echo "git tag: $(git tag --sort=-committerdate | head -n 1)"
          git tag -l

      - name: Determine git current SHA and latest tag
        id: git-version
        run: |
          GIT_TAG=$(git tag --sort=-committerdate | head -n 1)
          if [ -n "$GIT_TAG" ]; then
            GIT_TAG=${GIT_TAG}-SNAPSHOT
            echo "GIT_TAG=$GIT_TAG" >> $GITHUB_OUTPUT
          fi
          GIT_SHA=$(git rev-parse --short HEAD)
          PR_NUM=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          if [[ $PR_NUM != "null" ]]; then
            GIT_SHA="pr-${PR_NUM}/${GIT_SHA}"
          fi
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_OUTPUT
          
          echo "GIT_TAG=$GIT_TAG"
          echo "GIT_SHA=$GIT_SHA"

  js:
    name: Test JS code
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: npm install dependencies
        run: |
          cd ui
          npm ci

      - name: npm lint
        run: |
          cd ui
          npm run check-formatting && npm run lint

      - name: npm test
        run: |
          cd ui
          npm test

      - name: npm build
        run: |
          cd ui
          npm run build


  build:
    name: Build
    needs: [js, git-version]
    strategy:
      matrix:
        platform: [ linux/arm64 ]
    runs-on: ubuntu-latest
    env:
      IS_LINUX: ${{ startsWith(matrix.platform, 'linux/') && 'true' || 'false' }}
      IS_ARMV5: ${{ matrix.platform == 'linux/arm/v5' && 'true' || 'false' }}
      IS_DOCKER_PUSH_CONFIGURED: ${{ needs.check-push-enabled.outputs.is_enabled == 'true' }}
      DOCKER_BUILD_SUMMARY: false
      GIT_SHA: ${{ needs.git-version.outputs.git_sha }}
      GIT_TAG: ${{ needs.git-version.outputs.git_tag }}
    steps:
      - name: Sanitize platform name
        id: set-platform
        run: |
          PLATFORM=$(echo ${{ matrix.platform }} | tr '/' '_')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Build Binaries
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: ${{ matrix.platform }}
          outputs: |
            type=local,dest=./output/${{ env.PLATFORM }}
          target: binary
          build-args: |
            GIT_SHA=${{ env.GIT_SHA }}
            GIT_TAG=${{ env.GIT_TAG }}
            CROSS_TAGLIB_VERSION=${{ env.CROSS_TAGLIB_VERSION }}

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: navidrome-${{ env.PLATFORM }}
          path: ./output
          retention-days: 14
